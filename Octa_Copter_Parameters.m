clc
clearvars
addpath("Altitude Controller")
addpath("Yaw Controller")
addpath("Pitch Controller")
addpath("Phi Controller")   
addpath("X Controller")

%% Defining The Octa-Copter Parameters
b_m=1.645552813e-3;                               % Motor Thrust Cofficient
d_m=2.6675567e-3;                                 % Motor Torque Cofficient
no_of_motors=8;                                   % Motors Number
%% Inertia & Masses                             
Ixx=0.532; Izz=0.985; Iyy=.474;                   
Ixy=0;
Ixz=0; Iyz=0;
g=9.81;
m=4.455;                                          % Mass Of Octa In Kg
W=m*g;                                            % Weight Of Octa In N
I=[ Ixx Ixy Ixz;
    Ixy Iyy Iyz;
    Ixz Iyz Izz];
%% Lengthes of the motors
lx1=0.47;                                                                     
ly1=0.255;
l1=0.533769;
lx2=0.47;
ly2=0.255;
l2=0.458184;
lx3=0.47;
ly3=0.255;
l3=l1;
lx4=lx1;
ly4=0.255;
l4=l2;
lx5=0.47;
ly5=0.548;
l5=0.721945;
lx6=0.47;
ly6=0.548;
l6=0.668003;
lx7=0.47;
ly7=0.548;
l7=l5;
l8=l6;
lx8=lx5;
ly8=0.548;
omega_nom=sqrt((m*g)/(8*b_m));
%% Calculating The allocation Matrix
axis_ = [0,0,-1];

   Ct_i = 1.645552813e-3; % 1 default
   Cm_i = 2.6675567e-3; % 0.05 default
   
pos1=[0.47, 0.253, 0.0];
pos2=[-0.382, -0.253, 0.0];
pos3=[0.47, -0.253, 0.0];
pos4=[-0.382, 0.253, 0.0];
pos5=[0.47, 0.548, 0.0];
pos6=[-0.382, -0.548, 0.0];
pos7=[0.47, -0.548, 0.0];
pos8=[-0.382, 0.548, 0.0];


center = [pos1;pos2;pos3;pos4;pos5;pos6;pos7;pos8];
axis = [axis_;axis_;axis_;axis_;axis_;axis_;axis_;axis_];
dirs = [1;1;-1;-1;1;1;-1;-1];
%direction vector; 1 for CCW rotor; -1 for CW rotor
Ct = [Ct_i;Ct_i;Ct_i;Ct_i;Ct_i;Ct_i;Ct_i;Ct_i];
Cm = [Cm_i;Cm_i;Cm_i;Cm_i;Cm_i;Cm_i;Cm_i;Cm_i];

% Calculation of Am matrix
% Am is a 3xN matrix where N is the number of rotors
% Each column is the torque generated by one rotor
ax_m = axis./vecnorm(axis,2,2);
Am = (Ct.*cross(center,ax_m)-Cm.*ax_m.*dirs)';

% Calculation of At matrix
% At is a 3xN matrix where N is the number of rotors
% Each column is the thrust generated by one rotor
ax_t = ax_m;
At = (Ct.*ax_t)';

A_mat = [Am;At];

% B is a Nx6 matrix where N is the number of rotors
% Each column is the command to apply to the servos to get
% roll torque, pitch torque, yaw torque, x thrust, y thrust, z thrust
B_mat = pinv(A_mat);
% B_px is the normalized mix that is used in PX4
B_norm = vecnorm(B_mat,2,1);
B_max = max(abs(B_mat),[],1);
B_sum = sum(B_mat,1);
% same scale on roll and pitch
B_norm(1) = max(B_norm(1),B_norm(2))/sqrt(size(B_mat,1)/2);
B_norm(2) = B_norm(1);
% scale yaw seperately
B_norm(3) = B_max(3);
% same scale on x,y thrust
B_norm(4) = max(B_max(4),B_max(5));
B_norm(5) = B_norm(4);
% scale z thrust seperately
B_norm(6) = -B_sum(6)/nnz(B_mat(:,6));

B_norm(abs(B_norm) < 1e-3) =1;
B_px = B_mat./B_norm;

allocation_matrix = [B_px(:,[1:3]),B_px(:,6)];
allocation_matrix=[ -0.418379550895652   0.707106781186547   1.000000000000000  -1
                     0.418379550895651  -0.707106781186548   1.000000000000000  -1
                     0.418379550895651   0.707106781186548  -1.000000000000000  -1
                    -0.418379550895651  -0.707106781186547  -1.000000000000000  -1
                    -0.906213414588209   0.707106781186547   1.000000000000000  -1
                     0.906213414588209  -0.707106781186547   1.000000000000000  -1
                     0.906213414588209   0.707106781186547  -1.000000000000000  -1
                    -0.906213414588209  -0.707106781186547  -1.000000000000000  -1];

roll_scale=allocation_matrix(:,1);
pitch_scale=allocation_matrix(:,2);
yaw_scale=allocation_matrix(:,3);
thrust_scale=allocation_matrix(:,4);
%% Linearization
load("Linearization.mat")
linsys_tf=minreal(tf(linsys1));
z_dthrust=linsys_tf(5,3);
h_dthrust=-z_dthrust;
phi_droll=linsys_tf(8,2);
theta_dpitch=linsys_tf(11,1);
epsi_dyaw=linsys_tf(6,4);
g_tf=tf([9.81],[1 0 0]);

%% Controllers
load("Altitude_Gains.mat")
load("Yaw_Gains.mat")
load("Pitch_Gains.mat")
load("Phi_Gains.mat")
load("X_Gains")
load("theta_theta_command.mat")
load("phi_phi_command.mat")
theta_theta_comm_tf=tf(theta_theta_command);
x_theta=g_tf*tf(theta_theta_command);
y_phi=g_tf*tf(phi_phi_command);